<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en" /><updated>2021-12-27T05:53:53+00:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Dongho’s Dev Blog</title><subtitle>Your Site Description
</subtitle><author><name>Park Dongho</name><email>parkdongho28@naver.com</email></author><entry><title type="html">RTL/FPGA 공부 시 도움 될수도 있는 자료 목록</title><link href="http://localhost:4000/2021/12/26/RTL-FPGA-%EA%B3%B5%EB%B6%80%EC%8B%9C-%EB%8F%84%EC%9B%80-%EB%90%A0%EC%88%98%EB%8F%84-%EC%9E%88%EB%8A%94-%EC%9E%90%EB%A3%8C-%EB%AA%A9%EB%A1%9D.html" rel="alternate" type="text/html" title="RTL/FPGA 공부 시 도움 될수도 있는 자료 목록" /><published>2021-12-26T00:00:00+00:00</published><updated>2021-12-26T00:00:00+00:00</updated><id>http://localhost:4000/2021/12/26/RTL-FPGA-%EA%B3%B5%EB%B6%80%EC%8B%9C-%EB%8F%84%EC%9B%80-%EB%90%A0%EC%88%98%EB%8F%84-%EC%9E%88%EB%8A%94-%EC%9E%90%EB%A3%8C-%EB%AA%A9%EB%A1%9D</id><content type="html" xml:base="http://localhost:4000/2021/12/26/RTL-FPGA-%EA%B3%B5%EB%B6%80%EC%8B%9C-%EB%8F%84%EC%9B%80-%EB%90%A0%EC%88%98%EB%8F%84-%EC%9E%88%EB%8A%94-%EC%9E%90%EB%A3%8C-%EB%AA%A9%EB%A1%9D.html">&lt;!--more--&gt;

&lt;h1 id=&quot;hardware-design&quot;&gt;Hardware Design&lt;/h1&gt;

&lt;h2 id=&quot;hdl&quot;&gt;HDL&lt;/h2&gt;

&lt;h3 id=&quot;도서&quot;&gt;도서&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Verilog HDL: A Guide to Digital Design and Synthesis
    &lt;ul&gt;
      &lt;li&gt;원서 : https://www.amazon.com/-/ko/dp/0130449113/ref=sr_1_1?dchild=1&amp;amp;keywords=verilog+hdl&amp;amp;qid=1635502028&amp;amp;qsid=132-6454366-7382133&amp;amp;s=books&amp;amp;sr=1-1&amp;amp;sres=8177589180%2C0984629246%2C0134516753%2C0134549899%2C0963013351%2C8131794741%2CB08GS5LRRG%2C9333223371%2C981108775X%2C1691475297%2C1118841093%2C1598291068%2C0367778815%2C172153038X%2C0132774208%2C0136019285&amp;amp;srpt=ABIS_BOOK&lt;/li&gt;
      &lt;li&gt;번역서 : http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&amp;amp;mallGb=KOR&amp;amp;barcode=9788972835011&amp;amp;orderClick=LEa&amp;amp;Kc=&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;SystemVerilog for Design
    &lt;ul&gt;
      &lt;li&gt;원서 : https://www.amazon.com/-/ko/dp/0387333991/ref=sr_1_6?dchild=1&amp;amp;keywords=Systemverilog&amp;amp;qid=1635501847&amp;amp;qsid=132-6454366-7382133&amp;amp;s=books&amp;amp;sr=1-6&amp;amp;sres=1546776346%2C1523364025%2C1489995005%2C1119282667%2C1075968437%2C0387333991%2C3030713180%2C0134549899%2C1518681441%2C0387717145%2C3030247368%2CB091CRDBNN%2CB09K25MPH1%2CB083KN1J1P%2C172433509X%2C1365927148&amp;amp;srpt=ABIS_BOOK&lt;/li&gt;
      &lt;li&gt;번역서 : http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&amp;amp;mallGb=KOR&amp;amp;barcode=9788972837718&amp;amp;orderClick=LAG&amp;amp;Kc=&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;RTL Modeling with SystemVerilog for Simulation and Synthesis: Using SystemVerilog for ASIC and FPGA Design
    &lt;ul&gt;
      &lt;li&gt;원서 : https://www.amazon.com/RTL-Modeling-SystemVerilog-Simulation-Synthesis/dp/1546776346/ref=pd_bxgy_img_2/132-6454366-7382133?pd_rd_w=qqJtc&amp;amp;pf_rd_p=c64372fa-c41c-422e-990d-9e034f73989b&amp;amp;pf_rd_r=NMVZHWJX4SFQ5ZG92JFN&amp;amp;pd_rd_r=9619ea48-a6d0-4f13-9a41-c199498fcf88&amp;amp;pd_rd_wg=gFv5E&amp;amp;pd_rd_i=1546776346&amp;amp;psc=1&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;동영상-강좌&quot;&gt;동영상 강좌&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;충북대 IDEC Verilog HDL
    &lt;ul&gt;
      &lt;li&gt;1일차 오전 : https://www.youtube.com/watch?v=9SbI38MMN7Y&amp;amp;t=1768s&lt;/li&gt;
      &lt;li&gt;1일차 오후 : https://www.youtube.com/watch?v=pWabdHdmpZk&lt;/li&gt;
      &lt;li&gt;2일차 오전 : https://www.youtube.com/watch?v=mvgjsJASoEU&amp;amp;t=463s&lt;/li&gt;
      &lt;li&gt;2일차 오후 : https://www.youtube.com/watch?v=EYGmMTnZZks&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;digital-system-design&quot;&gt;Digital System Design&lt;/h2&gt;

&lt;h3 id=&quot;도서-1&quot;&gt;도서&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Digital Design: With an Introduction to the Verilog HDL, VHDL, and SystemVerilog
    &lt;ul&gt;
      &lt;li&gt;원서(Amazon) : https://www.amazon.com/-/ko/dp/0134549899/ref=sr_1_1?dchild=1&amp;amp;keywords=digital+design+mano&amp;amp;qid=1635502122&amp;amp;qsid=132-6454366-7382133&amp;amp;s=books&amp;amp;sr=1-1&amp;amp;sres=0134549899%2C9353062012%2C0132774208%2C933254252X%2C0131989243%2CB01K0PVJ0E%2C8120334698%2C1292231165%2C0133760634%2C0470531088%2C0804137803%2CB00HEHG7W2%2C1948209004%2C0415790522%2C0521177235%2C0131755633&amp;amp;srpt=ABIS_BOOK&lt;/li&gt;
      &lt;li&gt;원서(Global Edition) : http://www.kyobobook.co.kr/product/detailViewEng.laf?ejkGb=ENG&amp;amp;mallGb=ENG&amp;amp;barcode=9781292231167&amp;amp;orderClick=LAG&amp;amp;Kc=&lt;/li&gt;
      &lt;li&gt;번역서 : http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&amp;amp;mallGb=KOR&amp;amp;barcode=9791185475554&amp;amp;orderClick=LAG&amp;amp;Kc=&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;FPGA Prototyping Using Verilog Examples
    &lt;ul&gt;
      &lt;li&gt;원서 : https://www.amazon.com/-/ko/dp/0470185325/ref=sr_1_2?crid=1UXE7S49T5ZSI&amp;amp;dchild=1&amp;amp;keywords=verilog+examples&amp;amp;qid=1635502301&amp;amp;qsid=132-6454366-7382133&amp;amp;s=books&amp;amp;sprefix=verilog+%2Cstripbooks-intl-ship%2C324&amp;amp;sr=1-2&amp;amp;sres=0983497303%2C0470185325%2C1118011031%2C0980133793%2C1482593335%2CB01F9FW7CO%2CB00E2RKI36%2C7121257734%2C7118105678%2C7121222698%2C7115176329%2C7894360104%2C1691475297%2C125964376X%2C1728619440%2C0130449113&amp;amp;srpt=ABIS_BOOK&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;동영상-강좌-1&quot;&gt;동영상 강좌&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Design of Digital Circuits
    &lt;ul&gt;
      &lt;li&gt;https://www.youtube.com/watch?v=PMJxcArLU1E&amp;amp;list=PL5Q2soXY2Zi_QedyPWtRmFUJ2F8DdYP7l&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;axi-interface&quot;&gt;AXI Interface&lt;/h2&gt;

&lt;h3 id=&quot;문서&quot;&gt;문서&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;AMBA AXI and ACE Protocol Specification
    &lt;ul&gt;
      &lt;li&gt;http://www.gstitt.ece.ufl.edu/courses/fall15/eel4720_5721/labs/refs/AXI4_specification.pdf&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Vivado Design Suite AXI Reference Guide
    &lt;ul&gt;
      &lt;li&gt;https://www.xilinx.com/support/documentation/ip_documentation/axi_ref_guide/latest/ug1037-vivado-axi-reference-guide.pdf&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;동영상-강좌-2&quot;&gt;동영상 강좌&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;AMBA AXI와 AXI-Stream 설계와 검증
    &lt;ul&gt;
      &lt;li&gt;https://www.idec.or.kr/vod/apply/view/?pay=&amp;amp;search_val=axi&amp;amp;no=257&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;AMBA AXI 기반 IP 설계와 검증
    &lt;ul&gt;
      &lt;li&gt;https://www.idec.or.kr/vod/apply/view/?pay=&amp;amp;search_val=axi&amp;amp;no=124&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;SoC architecture 설계
    &lt;ul&gt;
      &lt;li&gt;https://www.idec.or.kr/vod/apply/view/?pay=&amp;amp;search_val=axi&amp;amp;no=11&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;computer-architecture&quot;&gt;Computer Architecture&lt;/h2&gt;

&lt;h3 id=&quot;도서-2&quot;&gt;도서&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Computer Organization and Design RISC-V Edition&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;원서 : https://www.amazon.com/-/ko/dp/0128122757/ref=pd_sbs_5/132-6454366-7382133?pd_rd_w=jZGyt&amp;amp;pf_rd_p=3676f086-9496-4fd7-8490-77cf7f43f846&amp;amp;pf_rd_r=0GG2M4PW6SPAMRMG3Q1Q&amp;amp;pd_rd_r=08a23760-39a4-4074-9230-b4714ba07486&amp;amp;pd_rd_wg=aqDDf&amp;amp;pd_rd_i=0128122757&amp;amp;psc=1&lt;/li&gt;
      &lt;li&gt;번역서 : http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&amp;amp;mallGb=KOR&amp;amp;barcode=9788964214244&amp;amp;orderClick=LAG&amp;amp;Kc=&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Computer Architecture: A Quantitative Approach&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;원서 : https://www.amazon.com/-/ko/dp/0128119055/ref=sr_1_1?crid=3G2K5ZOAF7MBK&amp;amp;dchild=1&amp;amp;keywords=computer+architecture&amp;amp;qid=1635501534&amp;amp;qsid=132-6454366-7382133&amp;amp;s=books&amp;amp;sprefix=computer+architecture%2Cstripbooks-intl-ship%2C322&amp;amp;sr=1-1&amp;amp;sres=0128119055%2C1838984399%2C0123944244%2C1593276680%2C0128201096%2C0128000562%2C1119183936%2C0124077269%2C0128203315%2C1138626597%2C1284123030%2C012383872X%2C1441908765%2C0321486137%2C1681739844%2CB099WJ2TZV&amp;amp;srpt=ABIS_BOOK&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;동영상-강좌-3&quot;&gt;동영상 강좌&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Computer Architecture - ETH Zürich
    &lt;ul&gt;
      &lt;li&gt;(2020) : https://www.youtube.com/playlist?list=PL5Q2soXY2Zi9xidyIgBxUz7xRPS-wisBN&lt;/li&gt;
      &lt;li&gt;(2021) : https://www.youtube.com/playlist?list=PL5Q2soXY2Zi_uej3aY39YB5pfW4SJ7LlN&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;vlsi-신호처리&quot;&gt;VLSI 신호처리&lt;/h2&gt;

&lt;h3 id=&quot;도서-3&quot;&gt;도서&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;VLSI Digital Signal Processing Systems Design and Implementation&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;동영상-강좌-4&quot;&gt;동영상 강좌&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;computer-arithmetic&quot;&gt;&lt;strong&gt;Computer Arithmetic&lt;/strong&gt;&lt;/h2&gt;

&lt;h3 id=&quot;도서-4&quot;&gt;&lt;strong&gt;도서&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Computer Arithmetic Algorithms&lt;/li&gt;
  &lt;li&gt;Computer arithmetic : algorithms and hardware designs&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;동영상-강좌-5&quot;&gt;&lt;strong&gt;동영상 강좌&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;/li&gt;
  &lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;image-processing&quot;&gt;Image Processing&lt;/h2&gt;

&lt;h3 id=&quot;도서-5&quot;&gt;도서&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Digital Image Processing
    &lt;ul&gt;
      &lt;li&gt;원서(Amazon) : https://www.amazon.com/-/ko/dp/1292223049/ref=sr_1_1?crid=2PYPZDB94TJQ5&amp;amp;dchild=1&amp;amp;keywords=digital+image+processing&amp;amp;qid=1635571627&amp;amp;qsid=132-6454366-7382133&amp;amp;s=books&amp;amp;sprefix=digital+image+pro%2Cstripbooks-intl-ship%2C351&amp;amp;sr=1-1&amp;amp;sres=0133356728%2C9389898641%2C0982085419%2C0470844736%2C0367783339%2C1973565153%2C0262017164%2C0070702624%2C0750326050%2C013405816X%2CB01JAK54TM%2C1848829183%2C3540240357%2C0521860857%2C013168728X%2C0367778769&amp;amp;srpt=ABIS_BOOK&lt;/li&gt;
      &lt;li&gt;원서(Global) : http://www.kyobobook.co.kr/product/detailViewEng.laf?mallGb=ENG&amp;amp;ejkGb=ENG&amp;amp;barcode=9781292223049&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;동영상-강좌-6&quot;&gt;동영상 강좌&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Image Processing using Zynq
    &lt;ul&gt;
      &lt;li&gt;https://www.youtube.com/playlist?list=PLTYvvOtCsmxzjHY70DYA8pe5D8745T_5m&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;npu&quot;&gt;NPU&lt;/h2&gt;

&lt;h3 id=&quot;도서-6&quot;&gt;도서&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Efficient Processing of Deep Neural Networks
    &lt;ul&gt;
      &lt;li&gt;https://www.amazon.com/Efficient-Processing-Deep-Neural-Networks/dp/168173835X&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;동영상-강좌-7&quot;&gt;동영상 강좌&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;IDEC 머신러닝을 위한 하드웨어 가속
    &lt;ul&gt;
      &lt;li&gt;https://www.youtube.com/watch?v=tDxA3VT5kzYaasdasdasdasd&lt;/li&gt;
      &lt;li&gt;https://www.youtube.com/watch?v=95gxMOotYRc&lt;/li&gt;
      &lt;li&gt;https://www.youtube.com/watch?v=z1gBnr6NdoQ&amp;amp;t=5508s&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;DPU 설계
    &lt;ul&gt;
      &lt;li&gt;http://www.idec.or.kr/vod/apply/view/?&amp;amp;no=277&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Digital Systems Design of AI Semiconductor
    &lt;ul&gt;
      &lt;li&gt;http://www.idec.or.kr/vod/apply/view/?&amp;amp;no=278&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;딥러닝 기초와 FPGA 구현
    &lt;ul&gt;
      &lt;li&gt;http://www.idec.or.kr/vod/apply/view/?&amp;amp;page=2&amp;amp;no=240&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;논문&quot;&gt;논문&lt;/h3&gt;

&lt;h4 id=&quot;micro-architecture&quot;&gt;Micro Architecture&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;instruction-set-architecture&quot;&gt;Instruction Set Architecture&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;model-compression&quot;&gt;Model Compression&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;processing-in-memory&quot;&gt;Processing in Memory&lt;/h2&gt;

&lt;h3 id=&quot;동영상-강좌-8&quot;&gt;동영상 강좌&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;The Story of RowHammer Lecture
    &lt;ul&gt;
      &lt;li&gt;https://www.youtube.com/watch?v=sgd7PHQQ1AI&amp;amp;list=PL5Q2soXY2Zi8D_5MGV6EnXEJHnV2YFBJl&amp;amp;t=0s&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Accelerating Genome Analysis Lecture
    &lt;ul&gt;
      &lt;li&gt;https://www.youtube.com/watch?v=r7sn41lH-4A&amp;amp;list=PL5Q2soXY2Zi8D_5MGV6EnXEJHnV2YFBJl&amp;amp;t=0s&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Memory-Centric Computing Systems Tutorial
    &lt;ul&gt;
      &lt;li&gt;https://www.youtube.com/watch?v=H3sEaINPBOE&amp;amp;list=PL5Q2soXY2Zi8D_5MGV6EnXEJHnV2YFBJl&amp;amp;t=0s&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Intelligent Architectures for Intelligent Machines Lecture
    &lt;ul&gt;
      &lt;li&gt;https://www.youtube.com/watch?v=GTieZPY4Wmc&amp;amp;list=PL5Q2soXY2Zi8D_5MGV6EnXEJHnV2YFBJl&amp;amp;t=0s&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Rethinking Memory System Design Lecture
    &lt;ul&gt;
      &lt;li&gt;https://www.youtube.com/watch?v=F7xZLNMIY1E&amp;amp;list=PL5Q2soXY2Zi8D_5MGV6EnXEJHnV2YFBJl&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Processing in Memory Course - ETH Zürich
    &lt;ul&gt;
      &lt;li&gt;https://www.youtube.com/playlist?list=PL5Q2soXY2Zi-841fUYYUK9EsXKhQKRPyX&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;논문-1&quot;&gt;논문&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;verification&quot;&gt;Verification&lt;/h1&gt;

&lt;h2 id=&quot;system-verilog-testbench&quot;&gt;System Verilog Testbench&lt;/h2&gt;

&lt;h3 id=&quot;도서-7&quot;&gt;도서&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;SystemVerilog for Verification
    &lt;ul&gt;
      &lt;li&gt;https://www.amazon.com/SystemVerilog-Verification-Learning-Testbench-Language/dp/1461407141/ref=pd_bxgy_img_1/132-6454366-7382133?pd_rd_w=4NA7V&amp;amp;pf_rd_p=c64372fa-c41c-422e-990d-9e034f73989b&amp;amp;pf_rd_r=K16XKNHT8WDFRS0AYRYY&amp;amp;pd_rd_r=4391f6f0-d996-4bcf-a8f0-30cc05dc5697&amp;amp;pd_rd_wg=tVG0s&amp;amp;pd_rd_i=1461407141&amp;amp;psc=1&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;동영상-강좌-9&quot;&gt;동영상 강좌&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;System Verilog Testbench
    &lt;ul&gt;
      &lt;li&gt;https://www.youtube.com/watch?v=sfUW711b2BE&amp;amp;list=PL8NoqZRUC7hfc5GP8ugqKWK88MP1J_yst&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;문서-1&quot;&gt;문서&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;https://www.youtube.com/playlist?list=PL8NoqZRUC7hcUeGjTGmAzuXZCwCmgY5kI&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;uvm&quot;&gt;UVM&lt;/h2&gt;

&lt;h3 id=&quot;도서-8&quot;&gt;도서&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;The UVM Primer: A Step-by-Step Introduction to the Universal Verification Methodology
    &lt;ul&gt;
      &lt;li&gt;https://www.amazon.com/UVM-Primer-Step-Step-Introduction/dp/0974164933/ref=pd_sbs_7/132-6454366-7382133?pd_rd_w=U13Mg&amp;amp;pf_rd_p=3676f086-9496-4fd7-8490-77cf7f43f846&amp;amp;pf_rd_r=HAZK54QT0RXR3CYD0RCR&amp;amp;pd_rd_r=2af54e4b-ef1c-426b-85ac-eb2e5416f374&amp;amp;pd_rd_wg=2KVBE&amp;amp;pd_rd_i=0974164933&amp;amp;psc=1&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;동영상-강좌-10&quot;&gt;동영상 강좌&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;문서-2&quot;&gt;문서&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;동영상-강좌-11&quot;&gt;동영상 강좌&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Easier UVM Video Tutorial
    &lt;ul&gt;
      &lt;li&gt;https://www.youtube.com/playlist?list=PLBIILfL2t1lnvzw7vF0arlvu36Wj4–D7&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;UVM Basics (Cadence)
    &lt;ul&gt;
      &lt;li&gt;https://www.youtube.com/playlist?list=PLTYvvOtCsmxyF94q7RqvQQWye7QHTs97v&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;UVM Basics(Synopsys)
    &lt;ul&gt;
      &lt;li&gt;https://www.youtube.com/playlist?list=PLEgCreVKPx5AP61Pu36QQE0Pkni2Vv-HD&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;cosim&quot;&gt;CoSim&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;HW/SW 동시협조시뮬레이션 - Verilog 시뮬레이터와 ARM ISS&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;https://www.idec.or.kr/edu/edu_library/view/?sdate=&amp;amp;edate=&amp;amp;search_val=동시&amp;amp;no=1988&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;https://www.idec.or.kr/edu/edu_library/view/?sdate=&amp;amp;edate=&amp;amp;search_val=동시&amp;amp;no=2107&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;iss&quot;&gt;ISS&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;HW/SW 동시협조시뮬레이션 - Verilog 시뮬레이터와 ARM ISS&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;https://www.idec.or.kr/edu/edu_library/view/?sdate=&amp;amp;edate=&amp;amp;search_val=동시&amp;amp;no=1988&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;https://www.idec.or.kr/edu/edu_library/view/?sdate=&amp;amp;edate=&amp;amp;search_val=동시&amp;amp;no=2107&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;algorithms&quot;&gt;Algorithms&lt;/h1&gt;

&lt;h2 id=&quot;deep-learning&quot;&gt;Deep Learning&lt;/h2&gt;

&lt;h3 id=&quot;도서-9&quot;&gt;도서&lt;/h3&gt;

&lt;h3 id=&quot;동영상-강좌-12&quot;&gt;동영상 강좌&lt;/h3&gt;

&lt;h3 id=&quot;논문-2&quot;&gt;논문&lt;/h3&gt;

&lt;h4 id=&quot;object-detection&quot;&gt;Object Detection&lt;/h4&gt;

&lt;h4 id=&quot;super-resolution&quot;&gt;Super Resolution&lt;/h4&gt;

&lt;h4 id=&quot;segmentation&quot;&gt;Segmentation&lt;/h4&gt;

&lt;h2 id=&quot;image-processing-1&quot;&gt;Image Processing&lt;/h2&gt;

&lt;h1 id=&quot;tools&quot;&gt;Tools&lt;/h1&gt;

&lt;h2 id=&quot;xilinx-vivado&quot;&gt;Xilinx Vivado&lt;/h2&gt;

&lt;h3 id=&quot;동영상-강좌-13&quot;&gt;동영상 강좌&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;vcs&quot;&gt;VCS&lt;/h2&gt;

&lt;h3 id=&quot;동영상-강좌-14&quot;&gt;동영상 강좌&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;VCS
    &lt;ul&gt;
      &lt;li&gt;https://www.youtube.com/watch?v=uNWSHwAHP-U&amp;amp;list=PL8NoqZRUC7hc2IZK-OuJwVmHnRvp29rlP&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;verdi&quot;&gt;Verdi&lt;/h2&gt;

&lt;h3 id=&quot;동영상-강좌-15&quot;&gt;동영상 강좌&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Verdi
    &lt;ul&gt;
      &lt;li&gt;https://www.youtube.com/watch?v=uNWSHwAHP-U&amp;amp;list=PL8NoqZRUC7hc2IZK-OuJwVmHnRvp29rlP&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;xilinx-hls&quot;&gt;Xilinx HLS&lt;/h2&gt;

&lt;h3 id=&quot;블로그&quot;&gt;블로그&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;HLS 강좌 HOKIM 블로그
    &lt;ul&gt;
      &lt;li&gt;https://hls-goodkook.blogspot.com/2021/08/ug871-xilinx-high-level-synthesis.html&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;자동화&quot;&gt;자동화&lt;/h1&gt;

&lt;h2 id=&quot;shell-script&quot;&gt;Shell script&lt;/h2&gt;

&lt;h3 id=&quot;동영상-강좌-16&quot;&gt;동영상 강좌&lt;/h3&gt;

&lt;h2 id=&quot;tcl&quot;&gt;Tcl&lt;/h2&gt;

&lt;h3 id=&quot;동영상-강좌-17&quot;&gt;동영상 강좌&lt;/h3&gt;

&lt;h2 id=&quot;makefile&quot;&gt;Makefile&lt;/h2&gt;

&lt;h3 id=&quot;동영상-강좌-18&quot;&gt;동영상 강좌&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;IDEC
    &lt;ul&gt;
      &lt;li&gt;https://www.youtube.com/watch?v=JhZiIHQ87QE&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ruby&quot;&gt;Ruby&lt;/h2&gt;

&lt;h3 id=&quot;동영상-강좌-19&quot;&gt;동영상 강좌&lt;/h3&gt;

&lt;h2 id=&quot;perl&quot;&gt;Perl&lt;/h2&gt;

&lt;h3 id=&quot;동영상-강좌-20&quot;&gt;동영상 강좌&lt;/h3&gt;

&lt;h1 id=&quot;관련-커뮤니티&quot;&gt;관련 커뮤니티&lt;/h1&gt;

&lt;h2 id=&quot;이니프로-카페&quot;&gt;이니프로 카페&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;https://cafe.naver.com/plduser&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;altera-town&quot;&gt;Altera Town&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;https://cafe.naver.com/alteratown&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;​&lt;/p&gt;

&lt;h2 id=&quot;xilinx-forum&quot;&gt;Xilinx Forum&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;https://support.xilinx.com/s/?language=en_US&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;유튜버&quot;&gt;유튜버&lt;/h1&gt;

&lt;h2 id=&quot;설계-독학-맛비&quot;&gt;설계 독학 맛비&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;RTL Design 관련&lt;/li&gt;
  &lt;li&gt;https://www.youtube.com/c/aifpga&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;kk-systemverilog&quot;&gt;KK SystemVerilog&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Verification 관련&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;https://www.youtube.com/channel/UCie9pbYjNDqWhmpNz_l3b3Q&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;onur-mutlu-lectures&quot;&gt;Onur Mutlu Lectures&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Computer Architecture 관련&lt;/li&gt;
  &lt;li&gt;https://www.youtube.com/c/OnurMutluLectures&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;블로그-1&quot;&gt;블로그&lt;/h1&gt;</content><author><name>Park Dongho</name><email>parkdongho28@naver.com</email></author><category term="Hardware" /><category term="Verification" /><summary type="html"></summary></entry><entry><title type="html">Vivado 설치하기</title><link href="http://localhost:4000/2021/12/22/vivado-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0.html" rel="alternate" type="text/html" title="Vivado 설치하기" /><published>2021-12-22T00:00:00+00:00</published><updated>2021-12-22T00:00:00+00:00</updated><id>http://localhost:4000/2021/12/22/vivado-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0</id><content type="html" xml:base="http://localhost:4000/2021/12/22/vivado-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0.html">&lt;!--more--&gt;

&lt;h1 id=&quot;linux&quot;&gt;Linux&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;테스트 환경&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Ubuntu : 20.04.1&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;VIvado : 2021.1&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;FPGA : Zybo Z7-20&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;1-vivado-설치&quot;&gt;1. Vivado 설치&lt;/h2&gt;

&lt;h2 id=&quot;2-boardfile&quot;&gt;2. Boardfile&lt;/h2&gt;

&lt;h2 id=&quot;3-driver&quot;&gt;3. Driver&lt;/h2&gt;

&lt;h1 id=&quot;windows&quot;&gt;Windows&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;테스트 환경&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Windows : 10.xx&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;VIvado : 2021.1&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;FPGA : Zybo Z7-20&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;1-vivado-설치-1&quot;&gt;1. Vivado 설치&lt;/h2&gt;

&lt;h2 id=&quot;2-boardfile-1&quot;&gt;2. Boardfile&lt;/h2&gt;

&lt;h2 id=&quot;3-driver-1&quot;&gt;3. Driver&lt;/h2&gt;</content><author><name>Park Dongho</name><email>parkdongho28@naver.com</email></author><category term="Hardware" /><category term="Tool" /><summary type="html"></summary></entry><entry><title type="html">NeoVIM 설정하기</title><link href="http://localhost:4000/2021/12/22/neovim-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0.html" rel="alternate" type="text/html" title="NeoVIM 설정하기" /><published>2021-12-22T00:00:00+00:00</published><updated>2021-12-22T00:00:00+00:00</updated><id>http://localhost:4000/2021/12/22/neovim-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0</id><content type="html" xml:base="http://localhost:4000/2021/12/22/neovim-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0.html">&lt;!--more--&gt;

&lt;h1 id=&quot;1-neovim&quot;&gt;1. NEOVIM&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;아래 명령어로 neovim 설치&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;neovim
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nvim&lt;/code&gt;  명령어로 neovim 실행&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nvim helloworld.v
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;2-vim-plug-설치&quot;&gt;2. VIM-PLUG 설치&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;아래 명령어를 터미널에 입력하여 vim-plug 설치 (unix/linux 기준)&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sh &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'curl -fLo &quot;${XDG_DATA_HOME:-$HOME/.local/share}&quot;/nvim/site/autoload/plug.vim --create-dirs \
       https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;만약 다른 OS라면 https://github.com/junegunn/vim-plug를 참고&lt;/p&gt;

&lt;p&gt;curl이 설치 되어 있지 않다면 curl을 설치해줍니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;curl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;vim-plug를 설치하면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.local/share/nvim/autoload&lt;/code&gt; 디렉토리에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;plug.vim&lt;/code&gt; 파일이 생성됩니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/.local/share/nvim/autoload
&lt;span class=&quot;nb&quot;&gt;ls

&lt;/span&gt;plug.vim
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;~/.config/nvim 디렉토리에 init.vim파일을 생성 해줍니다. init.vim 파일은 vim에서의 vimrc과 같은 역할을 수행합니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/.config/nvim
nvim init.vim
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;만약 ~/.config 디렉토리에 nvim 폴더가 존재하지 않다면 해당 폴더를 생성 해줍니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/.config
&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;nvim

&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/.config/nvim
nvim init.vim
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;init.vim 파일 설정&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;init.vim 파일을 수정해줍니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;call plug#begin&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'~/.vim/plugged'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; 플러그인 시작
&quot;&lt;/span&gt;NERDTree
Plug &lt;span class=&quot;s1&quot;&gt;'preservim/nerdtree'&lt;/span&gt;

&lt;span class=&quot;s2&quot;&gt;&quot;JellyBeans
Plug 'nanotech/jellybeans.vim'

&quot;&lt;/span&gt;Airline
Plug &lt;span class=&quot;s1&quot;&gt;'vim-airline/vim-airline'&lt;/span&gt;

&lt;span class=&quot;s2&quot;&gt;&quot;Tagbar
Plug 'preservim/tagbar'

&quot;&lt;/span&gt;COC
Plug &lt;span class=&quot;s1&quot;&gt;'neoclide/coc.nvim'&lt;/span&gt;, &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'branch'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'release'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
Plug &lt;span class=&quot;s1&quot;&gt;'neoclide/coc.nvim'&lt;/span&gt;, &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'branch'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'master'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'do'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'yarn install --frozen-lockfile'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

call plug#end&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;


colorscheme jellybeans
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;dark
~
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;init.vim 파일을 수정후 아래명령어를 nvim command mode로 입력하여 실행합니다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PlugInstall
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;3-coc&quot;&gt;3. CoC&lt;/h1&gt;

&lt;p&gt;https://github.com/neoclide/coc.nvim 를 참고함&lt;/p&gt;

&lt;h2 id=&quot;31-coc-설치&quot;&gt;3.1 CoC 설치&lt;/h2&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -sL install-node.vercel.app/lts | bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.config/nvim/init.vim&lt;/code&gt; 파일에 다음을 추가&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Plug &lt;span class=&quot;s1&quot;&gt;'neoclide/coc.nvim'&lt;/span&gt;, &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'branch'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'release'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
Plug &lt;span class=&quot;s1&quot;&gt;'neoclide/coc.nvim'&lt;/span&gt;, &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'branch'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'master'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'do'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'yarn install --frozen-lockfile'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;32-language-server-설치&quot;&gt;3.2 Language Server 설치&lt;/h2&gt;

&lt;h3 id=&quot;321-cc&quot;&gt;3.2.1 C/C++&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;설치방법&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;아래 명령어를 nvim command mode로 실행&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CocInstall coc-clangd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.config/nvim/coc-settings.json&lt;/code&gt; 에 다음을 추가&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;clangd.semanticHighlighting&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;coc.preferences.currentFunctionSymbolAutoUpdate&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;diagnostic.errorSign&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;✖&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;diagnostic.warningSign&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;⚠&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;diagnostic.infoSign&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ℹ&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;diagnostic.hintSign&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;➤&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;suggest.noselect&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;suggest.echodocSupport&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;codeLens.enable&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;signature.enable&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;suggest.preferCompleteThanJumpPlaceholder&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;clangd.path&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;~/.config/coc/extensions/coc-clangd-data/install/13.0.0/clangd_13.0.0/bin/clangd&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;322-system-verilog&quot;&gt;3.2.2 System Verilog&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;설치 방법&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;터미널에 다음을 입력&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; @imc-trading/svlangserver
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.config/nvim/coc-settings.json&lt;/code&gt; 에 다음을 추가&lt;/p&gt;

&lt;p&gt;https://gilee.kr/vimeul-idero-sayonghagi-2-init-vim-seoljeonghagi-2/을 참고함&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;languageserver&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;svlangserver&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;command&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;svlangserver&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;filetypes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;systemverilog&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;settings&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;systemverilog.includeIndexing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;**/*.{sv,svh}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;systemverilog.excludeIndexing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test/**/*.sv*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;systemverilog.defines&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;systemverilog.launchConfiguration&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/tools/verilator -sv -Wall --lint-only&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;systemverilog.formatCommand&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/tools/verible-verilog-format&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;323-python&quot;&gt;3.2.3 Python&lt;/h3&gt;

&lt;h3 id=&quot;324-final&quot;&gt;3.2.4 Final&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.config/nvim/coc-settings.json&lt;/code&gt;  파일&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;languageserver&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;svlangserver&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;command&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;svlangserver&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;filetypes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;systemverilog&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;settings&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;systemverilog.includeIndexing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;**/*.{sv,svh}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;systemverilog.excludeIndexing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test/**/*.sv*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;systemverilog.defines&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;systemverilog.launchConfiguration&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/tools/verilator -sv -Wall --lint-only&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;systemverilog.formatCommand&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/tools/verible-verilog-format&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;clangd.semanticHighlighting&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;coc.preferences.currentFunctionSymbolAutoUpdate&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;diagnostic.errorSign&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;✖&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;diagnostic.warningSign&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;⚠&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;diagnostic.infoSign&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ℹ&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;diagnostic.hintSign&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;➤&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;suggest.noselect&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;suggest.echodocSupport&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;codeLens.enable&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;signature.enable&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;suggest.preferCompleteThanJumpPlaceholder&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;clangd.path&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;~/.config/coc/extensions/coc-clangd-data/install/13.0.0/clangd_13.0.0/bin/clangd&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Park Dongho</name><email>parkdongho28@naver.com</email></author><category term="Tool" /><category term="Vim" /><summary type="html"></summary></entry><entry><title type="html">Verilog HDL 3장</title><link href="http://localhost:4000/2021/12/21/verilogHDL_chapter3_combinational_logic.html" rel="alternate" type="text/html" title="Verilog HDL 3장" /><published>2021-12-21T00:00:00+00:00</published><updated>2021-12-21T00:00:00+00:00</updated><id>http://localhost:4000/2021/12/21/verilogHDL_chapter3_combinational_logic</id><content type="html" xml:base="http://localhost:4000/2021/12/21/verilogHDL_chapter3_combinational_logic.html">&lt;h1 id=&quot;combinational-logic&quot;&gt;Combinational Logic&lt;/h1&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;31-gate-level-modeling&quot;&gt;3.1 Gate Level Modeling&lt;/h2&gt;

&lt;h2 id=&quot;32-dataflow-modeling&quot;&gt;3.2 Dataflow Modeling&lt;/h2&gt;

&lt;h3 id=&quot;321-continuous-assignment&quot;&gt;3.2.1 Continuous Assignment&lt;/h3&gt;

&lt;h3 id=&quot;322-연산자&quot;&gt;3.2.2 연산자&lt;/h3&gt;

&lt;h2 id=&quot;33-behaviaral-modeling&quot;&gt;3.3 Behaviaral Modeling&lt;/h2&gt;

&lt;h3 id=&quot;331-blocking-assignment&quot;&gt;3.3.1 Blocking Assignment&lt;/h3&gt;

&lt;h3 id=&quot;332-non-blocking-assignment&quot;&gt;3.3.2 Non-Blocking Assignment&lt;/h3&gt;

&lt;h2 id=&quot;34-case-study&quot;&gt;3.4 Case Study&lt;/h2&gt;

&lt;h3 id=&quot;341-nbit-adder&quot;&gt;3.4.1 nbit Adder&lt;/h3&gt;

&lt;h3 id=&quot;342-nbit-carry-look-ahead-adder&quot;&gt;3.4.2 nbit Carry Look Ahead Adder&lt;/h3&gt;

&lt;h3 id=&quot;343-ieee754-adder&quot;&gt;3.4.3 IEEE754 Adder&lt;/h3&gt;

&lt;h3 id=&quot;344-ieee754-multiplier&quot;&gt;3.4.4 IEEE754 Multiplier&lt;/h3&gt;

&lt;h3 id=&quot;345-4-to-1-multiplexer&quot;&gt;3.4.5 4-to-1 Multiplexer&lt;/h3&gt;

&lt;h3 id=&quot;346-alu&quot;&gt;3.4.6 ALU&lt;/h3&gt;

&lt;h3 id=&quot;347-rom&quot;&gt;3.4.7 ROM&lt;/h3&gt;

&lt;h3 id=&quot;348-bcd-to-7-segment&quot;&gt;3.4.8 BCD to 7 segment&lt;/h3&gt;</content><author><name>Park Dongho</name><email>parkdongho28@naver.com</email></author><category term="Hardware" /><category term="Verilog" /><category term="VerilogHDL강좌" /><summary type="html">Combinational Logic</summary></entry><entry><title type="html">Verilog HDL 2장</title><link href="http://localhost:4000/2021/12/19/verilogHDL_chapter2_module_&_instantiation.html" rel="alternate" type="text/html" title="Verilog HDL 2장" /><published>2021-12-19T00:00:00+00:00</published><updated>2021-12-19T00:00:00+00:00</updated><id>http://localhost:4000/2021/12/19/verilogHDL_chapter2_module_&amp;_instantiation</id><content type="html" xml:base="http://localhost:4000/2021/12/19/verilogHDL_chapter2_module_&amp;_instantiation.html">&lt;h1 id=&quot;module--instantiation&quot;&gt;Module &amp;amp; Instantiation&lt;/h1&gt;

&lt;!--more--&gt;

&lt;p&gt;디지털 회로를 설계할때 하나의 블럭안에 모든회로를 표현하면 매우 복잡합니다. &lt;strong&gt;그림1&lt;/strong&gt; 의 경우 4bit addition을 하는 간단한 회로임에도 매우 복잡해 보입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ParkDongho/ParkDongho.github.io/master/assets/images/2021-12-19-chapter2_module_%26_instantiation/시스템_반도체_설계_2장-figure_1.png&quot; alt=&quot;fig 1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;그림1&lt;/strong&gt; 4bit Adder 예제&lt;/p&gt;

&lt;p&gt;그래서 회로를 여러 서브블럭들로 나누어 설계를 합니다. &lt;strong&gt;그림2&lt;/strong&gt; 는 full-adder 4개를 연결하여 4bit adder를 만든 예시 입니다. 이때 4bit_adder 및 full_adder와 같은 설계 블록들을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;모듈(module)&lt;/code&gt;이라고 합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ParkDongho/ParkDongho.github.io/master/assets/images/2021-12-19-chapter2_module_%26_instantiation/시스템_반도체_설계_2장-figure_2.png&quot; alt=&quot;fig 2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;figure 2&lt;/strong&gt; module instantiation의 예시&lt;/p&gt;

&lt;p&gt;이제 full_adder라는 모듈의 구성을 살펴봅시다. 모듈은 외부와 데이터를 주고 받을 수 있는 입출력 인터페이스를 제공합니다. 이러한 인터페이스를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;포트(port)&lt;/code&gt; 라고 합니다. &lt;strong&gt;그림3&lt;/strong&gt; 에서 확인할 수 있듯이 full_adder 모듈은 a, b, carry_in 이라는 입력 포트, out, carry_out 이라는 출력포트로 구성되어 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ParkDongho/ParkDongho.github.io/master/assets/images/2021-12-19-chapter2_module_%26_instantiation/시스템_반도체_설계_2장-figure_3.png&quot; alt=&quot;fig 3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;figure 3&lt;/strong&gt; full adder 모듈&lt;/p&gt;

&lt;p&gt;이제 정의한 서브모듈이 어떻게 보다 큰 모듈로 합쳐질 수 있는지 알아봅시다. 이를 이해하기 위해서는&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;instantiation&lt;/code&gt; 의 개념을 이해할 필요가 있습니다. 먼저 각각의 모듈은 객체를 만들기 위한 템플릿을 제공합니다. 이러한 템플릿을 통하여 상위 레벨의 모듈에서 객체를 불러들입니다. 이때 각각의 객체는 고유한 이름, 변수, 파라미터, 입출력 인터페이스를 가집니다. 이러한 객체를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;instance&lt;/code&gt;라고 하고 모듈 템플릿으로 부터 객체를 생성하는 것을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;instantization&lt;/code&gt; 이라고 합니다.&lt;/p&gt;

&lt;p&gt;이에 대한 예시로 &lt;strong&gt;그림2&lt;/strong&gt; 의 4bit adder 를 다시 확인해 봅시다.  먼저 full_adder 라는 모듈에서 서브모듈에 대한 템플릿을 정의 합니다. 이때 full_adder 모듈은 5개의 입출력 포트, 내부 로직에 대한 정의 등을 포함합니다. 이제 정의한 full_adder 모듈을 템플릿으로 하여 4bit_adder라는 상위 모듈에서 full_adder_0, full_adder_1, full_adder_2, full_adder_3 라는 고유한 이름의 객체 4개를 불러들입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ParkDongho/ParkDongho.github.io/master/assets/images/2021-12-19-chapter2_module_%26_instantiation/시스템_반도체_설계_2장-figure_2.png&quot; alt=&quot;fig 2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;figure 2&lt;/strong&gt; module instantiation의 예시&lt;/p&gt;

&lt;h2 id=&quot;21-module&quot;&gt;2.1 Module&lt;/h2&gt;

&lt;p&gt;위에서 모듈이 무었인지 알아보았습니다. 이제 이를 베릴로그에서 어떻게 기술하는지 알아봅시다.&lt;/p&gt;

&lt;div class=&quot;language-verilog highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;모듈명&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//모듈 시작&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//port를 정의&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  
  &lt;span class=&quot;c1&quot;&gt;//내부로직을 정의&lt;/span&gt;
  
&lt;span class=&quot;k&quot;&gt;endmodule&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//모듈 끝&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;verilog의 모듈은&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;module&lt;/code&gt;이라는 키워드로 시작하고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;endmodule&lt;/code&gt;이라는 키워드로 모듈을 닫습니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;module&lt;/code&gt;이라는 키워드 다음에는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;모듈명&lt;/code&gt;을 정의합니다.&lt;/p&gt;

&lt;p&gt;그리고 모듈명 다음에 나오는 괄호 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;( )&lt;/code&gt;에서는 포트를 정의 합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ParkDongho/ParkDongho.github.io/master/assets/images/2021-12-19-chapter2_module_%26_instantiation/시스템_반도체_설계_2장-figure_3.png&quot; alt=&quot;fig 3&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-verilog highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;full_adder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//module 시작&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//port를 정의&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//내부로직을 정의&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;endmodule&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//모듈 끝&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음은 full_adder에 대한 예시입니다. 본 예시에서 모듈이름이 full_adder로 정의 됨을 확인할 수 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;22-port&quot;&gt;2.2 Port&lt;/h2&gt;

&lt;p&gt;모듈이 외부 및 다른 모듈과 신호를 주고 받으려면 입출력 단자가 필요합니다. 이러한 입출력 단자를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;포트&lt;/code&gt;라고 합니다. 이러한 입력단자에서 신호를 받아 처리를 한후 출력단자로 내보냅니다. verilog에서는 총 3가지의 port가 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;input : 모듈내로 데이터를 받는 포트&lt;/li&gt;
  &lt;li&gt;output : 모듈밖으로 데이터를 내보내는 포트&lt;/li&gt;
  &lt;li&gt;inout : 모듈 내로 데이터를 받을수도 있고 밖으로 데이터를 내보낼 수도 있는 양방향 포트&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이때 각 포트는 &lt;strong&gt;그림4&lt;/strong&gt; 와 같이&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;input 포트 : only net&lt;/li&gt;
  &lt;li&gt;output 포트 : reg or net&lt;/li&gt;
  &lt;li&gt;inout 포트 : only net&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;와 같은 타입으로 정의 될수 있습니다.&lt;/p&gt;

&lt;p&gt;또한 각 포트에 instantiation으로 외부에서 연결되는 신호는 &lt;strong&gt;그림4&lt;/strong&gt; 와 같이&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;input 포트 : reg or net&lt;/li&gt;
  &lt;li&gt;output 포트 : only net&lt;/li&gt;
  &lt;li&gt;inout 포트 : only net&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;와 같은 타입으로 정의 될 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ParkDongho/ParkDongho.github.io/master/assets/images/2021-12-19-chapter2_module_%26_instantiation/시스템_반도체_설계_2장-figure_4.png&quot; alt=&quot;figure4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;figure 4&lt;/strong&gt; module의 포트 연결 규칙&lt;/p&gt;

&lt;p&gt;왜 이런 규칙이 존재하는지 생각해 볼까요? 이 부분은 베릴로그가 처음이신 분은 넘어가도 괜찮습니다.&lt;/p&gt;

&lt;p&gt;먼저 모듈의 입력은 반드시 continuous하게 신호를 받아야 된다는 규칙이 있습니다. 이렇게 continuous하게 들어온 신호에 의하여 내부로직이 continuous(assign문)하게 혹은 procedual(always문)하게 연산된후 출력을 내보내게되죠. 따라서 출력은 continuous 혹은 procedual할 수 있습니다. 이때 continuous한 신호는 wire에 procedual한 신호는 reg타입에 대응됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ParkDongho/ParkDongho.github.io/master/assets/images/2021-12-19-chapter2_module_%26_instantiation/시스템_반도체_설계_2장-figure_5.png&quot; alt=&quot;figure5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;figure 5&lt;/strong&gt; module의 포트 연결 규칙 with instantiation&lt;/p&gt;

&lt;p&gt;모듈A를 instantiation한 모듈B를 가정해 봅시다. 모듈 B의 입장에서 모듈 A의 출력포트에 연결된 신호는 모듈B의 input입니다. input은 반드시 continuous 하여야 하므로 net 타입만이 올 수 있습니다. 이와 동일하게 모듈 B의 입장에서 모듈 A의 입력 포트에 연결된 신호는 모듈B의 output입니다. 따라서 reg 혹은 net타입이 올 수 있죠.&lt;/p&gt;

&lt;p&gt;이제 포트를 어떻게 표현할 수 있는지 알아 봅시다.&lt;/p&gt;

&lt;p&gt;포트는 아래와 같이&lt;/p&gt;

&lt;div class=&quot;language-verilog highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;모듈명&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;포트&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;타입&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;변수&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;타입&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;입력&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;포트&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;명&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;포트&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;타입&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;변수&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;타입&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;입력&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;포트&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;명&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  
  &lt;span class=&quot;c1&quot;&gt;//여기에 내부 로직 기술&lt;/span&gt;
  
&lt;span class=&quot;k&quot;&gt;endmodule&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;포트_타입&amp;gt; [변수_타입] 입력_포트_명&lt;/code&gt; 와 같은 형태로 표현 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;이때&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;포트_타입&amp;gt;&lt;/code&gt; 은  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;input&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;output&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inout&lt;/code&gt;이 올 수 있고 반드시 정의 해야 합니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[변수_타입]&lt;/code&gt;은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wire&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reg&lt;/code&gt;가 올수 있으며 생략가능합니다. 만약 생략하였을시 기본적으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wire&lt;/code&gt;가 오게 됩니다. 만약 출력값을 유지시켜줄 필요가 있다면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reg&lt;/code&gt;를 사용할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;입력_포트_명&lt;/code&gt;은 포트의 이름을 정의 해줍니다.&lt;/p&gt;

&lt;p&gt;full adder 예제를 확인 해봅시다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ParkDongho/ParkDongho.github.io/master/assets/images/2021-12-19-chapter2_module_%26_instantiation/시스템_반도체_설계_2장-figure_3.png&quot; alt=&quot;fig 3&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-verilog highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;full_adder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//module 키워드로 모듈시작&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;//1bit wire input&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;//1bit wire input&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carry_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//1bit wire input&lt;/span&gt;
  
  &lt;span class=&quot;kt&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;//1bit reg output&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carry_out&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;//1bit wire output&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  
  &lt;span class=&quot;c1&quot;&gt;//mux의 내부 로직&lt;/span&gt;
  
&lt;span class=&quot;k&quot;&gt;endmodule&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//endmodule 키워드로 모듈 종료&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Example 2.1&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;포트 a, b, carry_in은 입력 포트입니다. input 키워드를 통하여 입력으로 정의해 줍니다.&lt;/li&gt;
  &lt;li&gt;포트 out, carry_out은 출력 포트 입니다. output 키워드를 통하여 출력으로 정의해 줍니다.&lt;/li&gt;
  &lt;li&gt;포트 a는 변수 타입을 정의하지 않았습니다. 따라서 default값 wire형으로 정의 됩니다.&lt;/li&gt;
  &lt;li&gt;포트 b, carry_in은 wire 타입으로 정의해 주었습니다.&lt;/li&gt;
  &lt;li&gt;포트 out은 reg 타입으로 정의하였습니다.&lt;/li&gt;
  &lt;li&gt;포트 carry_out은 변수타입을 정의하지 않았습니다. 따라서 wire형으로 정의됩니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;예제에서는 예시를 보여주기 위해 여러 종류의 포트 선언방식을 섞어 사용하였지만 실제로 설계할때는 아래와 같이 일정한 코딩 가이드라인에 따라주는 것이 좋습니다.&lt;/p&gt;

&lt;div class=&quot;language-verilog highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;full_adder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//module 키워드로 모듈시작&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;//1bit wire input&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;//1bit wire input&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carry_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//1bit wire input&lt;/span&gt;
  
  &lt;span class=&quot;kt&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;//1bit wire output&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carry_out&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//1bit wire output&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  
  &lt;span class=&quot;c1&quot;&gt;//mux의 내부 로직&lt;/span&gt;
  
&lt;span class=&quot;k&quot;&gt;endmodule&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//endmodule 키워드로 모듈 종료&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;221-vector-form&quot;&gt;2.2.1 Vector Form&lt;/h3&gt;

&lt;p&gt;이전까지는 1bit의 입출력까지만 다루었습니다. 하지만 numerical data를 표현하기 위해서는 n-bit의 binary data 형태로 표현할수 있으면 좋겠죠. 이를 위하여 verilog에서는 verctor 형태의 데이터 선언을 지원합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ParkDongho/ParkDongho.github.io/master/assets/images/2021-12-19-chapter2_module_%26_instantiation/시스템_반도체_설계_2장-figure_6.png&quot; alt=&quot;fig 6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;figure 6&lt;/strong&gt; 4bit adder의 vector 형태 표현&lt;/p&gt;

&lt;p&gt;Verilog에서의 vector 선언는 아래와 같이 표현합니다.&lt;/p&gt;

&lt;div class=&quot;language-verilog highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;포트&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;타입&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;변수&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;타입&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MSB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LSB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;변수명&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//포트 선언&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;변수&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;타입&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MSB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LSB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;변수명&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//변수 선언&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이전 1bit의 변수 선언에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;변수_타입&amp;gt;&lt;/code&gt;과 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;변수명&amp;gt;&lt;/code&gt; 사이에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[MSB : LSB]&lt;/code&gt; 가 추가된 형태입니다.&lt;/p&gt;

&lt;p&gt;이때 MSB 최상위 비트, LSB는 최하위 비트를 의미합니다.&lt;/p&gt;

&lt;p&gt;이를 4bit adder에 적용하면 아래와 같습니다.&lt;/p&gt;

&lt;div class=&quot;language-verilog highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nbit_adder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//4bit input port&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//4bit input port&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carry_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//1bit input port&lt;/span&gt;
  
  &lt;span class=&quot;kt&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//4bit output port&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carry_out&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//1bit output port&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  
  &lt;span class=&quot;c1&quot;&gt;//instantiation&lt;/span&gt;
  
&lt;span class=&quot;k&quot;&gt;endmodule&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 예시에서는 포트 a, b, out를 4bit로 구성하였습니다.&lt;/p&gt;

&lt;p&gt;4bit bus의 최상위 비트(MSB)는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3&lt;/code&gt; 최하위 비트(LSB)는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;이므로&lt;/p&gt;

&lt;div class=&quot;language-verilog highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;포트&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;타입&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;변수&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;타입&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;변수명&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//포트 선언&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;형태로 선언해주었습니다.&lt;/p&gt;

&lt;p&gt;하지만 위와 같이 표현한다면 bus의 폭을 변화시키고 싶을시 모든 포트의 MSB를 수정해주어야 하는 문제가 있습니다.&lt;/p&gt;

&lt;p&gt;또한 직관적이지 못한 문제도 있지요.&lt;/p&gt;

&lt;p&gt;따라서 아래와 같이 parameter를 선언하여&lt;/p&gt;

&lt;p&gt;최상위 비트(MSB)는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DATA_WIDTH-1&lt;/code&gt; 최하위 비트(LSB)는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;의 형태, 즉&lt;/p&gt;

&lt;div class=&quot;language-verilog highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;포트&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;타입&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;변수&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;타입&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DATA_WIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;변수명&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//포트 선언&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;형태로 많이들 선언합니다.&lt;/p&gt;

&lt;p&gt;이를 4bit adder에 적용해보면 아래와 같습니다.&lt;/p&gt;

&lt;div class=&quot;language-verilog highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nbit_adder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;#(&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DATA_WIDTH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DATA_WIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DATA_WIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carry_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  
  &lt;span class=&quot;kt&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DATA_WIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carry_out&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  
  &lt;span class=&quot;c1&quot;&gt;//instantiation&lt;/span&gt;
  
&lt;span class=&quot;k&quot;&gt;endmodule&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;23-instantiation&quot;&gt;2.3 Instantiation&lt;/h2&gt;

&lt;p&gt;이제 상위모듈에서 하위모듈의 인스턴스를 불러들이는 instantiation을 해봅시다.&lt;/p&gt;

&lt;p&gt;nbit_adder라는 모듈에서 4개의 full_adder 인스턴스를 불러들이는 형태이겠죠.&lt;/p&gt;

&lt;p&gt;또한 불러들인 모듈에 wire를 연결해주는 작업이 필요하겠죠.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ParkDongho/ParkDongho.github.io/master/assets/images/2021-12-19-chapter2_module_%26_instantiation/시스템_반도체_설계_2장-figure_7.png&quot; alt=&quot;fig 7&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-verilog highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nbit_adder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;#(&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DATA_WIDTH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DATA_WIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DATA_WIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carry_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  
  &lt;span class=&quot;kt&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DATA_WIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carry_out&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  
  &lt;span class=&quot;n&quot;&gt;full_adder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;full_adder_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;carry_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;carry_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;carry_out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;full_adder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;full_adder_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;carry_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;carry_out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;full_adder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;full_adder_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;carry_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;carry_out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;full_adder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;full_adder_3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;carry_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;carry_out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;carry_out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
  
&lt;span class=&quot;k&quot;&gt;endmodule&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ParkDongho/ParkDongho.github.io/master/assets/images/2021-12-19-chapter2_module_%26_instantiation/시스템_반도체_설계_2장-figure_8.png&quot; alt=&quot;fig 8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ParkDongho/ParkDongho.github.io/master/assets/images/2021-12-19-chapter2_module_%26_instantiation/시스템_반도체_설계_2장-figure_9.png&quot; alt=&quot;fig 9&quot; /&gt;&lt;/p&gt;</content><author><name>Park Dongho</name><email>parkdongho28@naver.com</email></author><category term="Hardware" /><category term="Verilog" /><category term="VerilogHDL강좌" /><summary type="html">Module &amp;amp; Instantiation</summary></entry><entry><title type="html">Verilog HDL 1장</title><link href="http://localhost:4000/2021/12/16/verilogHDL_chapter1_introduction.html" rel="alternate" type="text/html" title="Verilog HDL 1장" /><published>2021-12-16T00:00:00+00:00</published><updated>2021-12-16T00:00:00+00:00</updated><id>http://localhost:4000/2021/12/16/verilogHDL_chapter1_introduction</id><content type="html" xml:base="http://localhost:4000/2021/12/16/verilogHDL_chapter1_introduction.html">&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;</content><author><name>Park Dongho</name><email>parkdongho28@naver.com</email></author><category term="Hardware" /><category term="Verilog" /><category term="VerilogHDL강좌" /><summary type="html">Introduction</summary></entry><entry><title type="html">Jekyll 블로그 운영하기</title><link href="http://localhost:4000/2021/11/28/jekyll-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%9A%B4%EC%98%81%ED%95%98%EA%B8%B0.html" rel="alternate" type="text/html" title="Jekyll 블로그 운영하기" /><published>2021-11-28T00:00:00+00:00</published><updated>2021-11-28T00:00:00+00:00</updated><id>http://localhost:4000/2021/11/28/jekyll-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%9A%B4%EC%98%81%ED%95%98%EA%B8%B0</id><content type="html" xml:base="http://localhost:4000/2021/11/28/jekyll-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%9A%B4%EC%98%81%ED%95%98%EA%B8%B0.html">&lt;!--more--&gt;

&lt;h1 id=&quot;포스트-작성&quot;&gt;포스트 작성&lt;/h1&gt;

&lt;h2 id=&quot;layout&quot;&gt;Layout&lt;/h2&gt;

&lt;h3 id=&quot;1번&quot;&gt;1번&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;article&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;여기에_제목을_입력하세요&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;여기에_태그를_입력하세요 여기에_태그를_입력하세요 여기에_태그를_입력하세요&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;immersive&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;theme&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;dark&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;article_header&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;overlay&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;theme&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;dark&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;background_color&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;#203028'&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;background_image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;gradient&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;linear-gradient(135deg,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;rgba(34,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;139,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;87&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;.4),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;rgba(139,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;34,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;139,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;.4))'&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/background_mountain.jpg&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;

서브 타이틀 및 본문

&lt;span class=&quot;c&quot;&gt;&amp;lt;!--more--&amp;gt;&lt;/span&gt; 

본문

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;2번&quot;&gt;2번&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;article&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;여기에_제목을_입력하세요&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;여기에_태그를_입력하세요 여기에_태그를_입력하세요 여기에_태그를_입력하세요&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;immersive&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;theme&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;dark&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;article_header&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;overlay&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;theme&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;dark&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;background_color&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;#203028'&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;background_image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;gradient&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;linear-gradient(135deg,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;rgba(34,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;139,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;87&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;.4),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;rgba(139,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;34,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;139,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;.4))'&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/background_mountain.jpg&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;

서브 타이틀 및 본문

&lt;span class=&quot;c&quot;&gt;&amp;lt;!--more--&amp;gt;&lt;/span&gt; 

본문

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;local-preview&quot;&gt;Local Preview&lt;/h2&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://127.0.0.1:4000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;포스트-업로드&quot;&gt;포스트 업로드&lt;/h1&gt;

&lt;h2 id=&quot;git-명령어&quot;&gt;Git 명령어&lt;/h2&gt;

&lt;h3 id=&quot;clone&quot;&gt;Clone&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone &amp;lt;url&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;pull&quot;&gt;Pull&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git pull &amp;lt;원격 저장소 명&amp;gt; &amp;lt;branch 명&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;fetch&quot;&gt;Fetch&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;commit&quot;&gt;Commit&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;push&quot;&gt;Push&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Park Dongho</name><email>parkdongho28@naver.com</email></author><category term="Blog" /><category term="TeXt" /><category term="Jekyll" /><summary type="html"></summary></entry><entry><title type="html">Jekyll TeXt 테마 적용하기</title><link href="http://localhost:4000/2021/11/27/jekyll-TeXt-%ED%85%8C%EB%A7%88-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0.html" rel="alternate" type="text/html" title="Jekyll TeXt 테마 적용하기" /><published>2021-11-27T00:00:00+00:00</published><updated>2021-11-27T00:00:00+00:00</updated><id>http://localhost:4000/2021/11/27/jekyll-TeXt-%ED%85%8C%EB%A7%88-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0</id><content type="html" xml:base="http://localhost:4000/2021/11/27/jekyll-TeXt-%ED%85%8C%EB%A7%88-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0.html">&lt;!--more--&gt;

&lt;h1 id=&quot;download&quot;&gt;Download&lt;/h1&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/kitian616/jekyll-TeXt-theme.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;environment&quot;&gt;Environment&lt;/h1&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--path&lt;/span&gt; vendor/bundle
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;local-preview&quot;&gt;Local Preview&lt;/h1&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Park Dongho</name><email>parkdongho28@naver.com</email></author><category term="Blog" /><category term="TeXt" /><category term="Jekyll" /><summary type="html"></summary></entry><entry><title type="html">HELLO WORLD!</title><link href="http://localhost:4000/2021/11/27/hello-world.html" rel="alternate" type="text/html" title="HELLO WORLD!" /><published>2021-11-27T00:00:00+00:00</published><updated>2021-11-27T00:00:00+00:00</updated><id>http://localhost:4000/2021/11/27/hello-world</id><content type="html" xml:base="http://localhost:4000/2021/11/27/hello-world.html">&lt;!--more--&gt;

&lt;h1 id=&quot;새로운-시작&quot;&gt;&lt;em&gt;새로운 시작!&lt;/em&gt;&lt;/h1&gt;

&lt;div class=&quot;language-verilog highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hello_world&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;HELLO WORLD!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;endmodule&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;오늘부터 개발 블로그를 운영하려 합니다.&lt;/p&gt;

&lt;p&gt;1주일에 3회 정도 RTL 설계 관련 내용을 연재 할 계획입니다.&lt;/p&gt;</content><author><name>Park Dongho</name><email>parkdongho28@naver.com</email></author><category term="Blog" /><summary type="html"></summary></entry></feed>